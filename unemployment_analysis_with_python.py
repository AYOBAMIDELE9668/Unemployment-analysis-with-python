# -*- coding: utf-8 -*-
"""Unemployment Analysis with Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ojYdBo834SFdAoX7DlmyI4q8TOQNjGWu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

data = pd.read_csv('Unemployment_Rate_upto_11_2020.csv')

data.head(5)

# Check for missing values
print(data.isnull().sum())

# Convert 'Date' column to datetime format
# Check if 'Date' column exists, otherwise try alternative names
if 'Date' in data.columns:
    data['Date'] = pd.to_datetime(data['Date'], format='%d-%m-%Y')
else:
    # Try alternative column names like 'date' or 'DATE'
    alternative_names = ['date', 'DATE']
    for name in alternative_names:
        if name in data.columns:
            data['Date'] = pd.to_datetime(data[name], format='%d-%m-%Y')
            print(f"Found date column with name: {name}")
            break
    else:
        print("Date column not found in any of the expected names.")

# Rename columns for easier access
data.rename(columns={
    'Estimated Unemployment Rate (%)': 'Unemployment_Rate',
    'Estimated Employed': 'Employed',
    'Estimated Labour Participation Rate (%)': 'Labour_Participation_Rate'
}, inplace=True)

# Get summary statistics
print(data.describe())

print(data.columns)

# Strip leading/trailing spaces from column names
data.columns = data.columns.str.strip()

# Verify cleaned column names
print(data.columns)

# Rename columns for easier access
data.rename(columns={
    'Estimated Unemployment Rate (%)': 'Unemployment_Rate',
    'Estimated Employed': 'Employed',
    'Estimated Labour Participation Rate (%)': 'Labour_Participation_Rate'
}, inplace=True)

# Verify renamed columns
print(data.columns)

# Plot the distribution of unemployment rate
plt.figure(figsize=(10, 6))
sns.histplot(data['Unemployment_Rate'], kde=True, bins=30, color='blue')
plt.title('Distribution of Unemployment Rate')
plt.xlabel('Unemployment Rate (%)')
plt.ylabel('Frequency')
plt.show()

# Group data by date and calculate average unemployment rate
unemployment_over_time = data.groupby('Date')['Unemployment_Rate'].mean().reset_index()

# Plot unemployment rate over time
plt.figure(figsize=(12, 6))
plt.plot(unemployment_over_time['Date'], unemployment_over_time['Unemployment_Rate'], marker='o', linestyle='-', color='red')
plt.title('Unemployment Rate Over Time')
plt.xlabel('Date')
plt.ylabel('Average Unemployment Rate (%)')
plt.grid()
plt.show()

# Group data by region and calculate average unemployment rate
regional_unemployment = data.groupby('Region')['Unemployment_Rate'].mean().reset_index()

# Plot regional unemployment rates
plt.figure(figsize=(12, 6))
sns.barplot(x='Region', y='Unemployment_Rate', data=regional_unemployment, palette='viridis')
plt.xticks(rotation=90)
plt.title('Average Unemployment Rate by Region')
plt.xlabel('Region')
plt.ylabel('Average Unemployment Rate (%)')
plt.show()

# Use Plotly for an interactive map
fig = px.scatter_geo(data,
                     lat='latitude',
                     lon='longitude',
                     color='Unemployment_Rate',
                     size='Unemployment_Rate',
                     hover_name='Region',
                     animation_frame='Date',
                     title='Unemployment Rate Across Regions Over Time',
                     scope='asia',
                     center={'lat': 20.5937, 'lon': 78.9629},
                     height=600)
fig.show()

# Calculate correlation matrix
correlation_matrix = data[['Unemployment_Rate', 'Employed', 'Labour_Participation_Rate']].corr()

# Plot heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# Print key insights
print("Key Insights:")
print("- The highest unemployment rate was observed in:", data.loc[data['Unemployment_Rate'].idxmax(), 'Region'])
print("- The lowest unemployment rate was observed in:", data.loc[data['Unemployment_Rate'].idxmin(), 'Region'])
print("- The average unemployment rate across all regions is:", round(data['Unemployment_Rate'].mean(), 2), "%")